image: openjdk:8-jdk #Defining the Docker Image
variables:
  ANDROID_COMPILE_SDK: "28" #set compile SDK version
  ANDROID_BUILD_TOOLS: "28.0.2" #set build tool version
  ANDROID_SDK_TOOLS: "4333796" #set SDK tool build number you can find yous here https://developer.android.com/studio/releases/sdk-tools

before_script:
  #Read CICD Vars in a file
  - "echo { > android/app/globalSettings.json"
  - 'echo \"PLAY_STORE_UPLOAD_KEYSTORE_ALIAS\": \"$PLAY_STORE_UPLOAD_KEYSTORE_ALIAS\", >> android/app/globalSettings.json'
  - 'echo \"PLAY_STORE_UPLOAD_KEYSTORE_PASSWORD\": \"$PLAY_STORE_UPLOAD_KEYSTORE_PASSWORD\", >> android/app/globalSettings.json'
  - 'echo \"PLAY_STORE_UPLOAD_KEY_PASSWORD\": \"$PLAY_STORE_UPLOAD_KEY_PASSWORD\", >> android/app/globalSettings.json'
  - 'echo \"GCP_PLAYSTORE_SERIVCE_ACCOUNT_EMAIL\": \"$PLAY_STORE_SERVICE_ACCOUNT_EMAIL\", >> android/app/globalSettings.json'
  - "echo } >> android/app/globalSettings.json"
  - cat android/app/globalSettings.json
  - "echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p"

  # Output Playstore Service Account Key JSON to a runtime JSON file
  - "echo $GCP_PLAYSTORE_SERIVCE_ACCOUNT_KEY_JSON > android/app/serviceAccess.json"
  - cat android/app/serviceAccess.json

  #Installing Packages
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Adding the NodeSource APT repository for Debian-based distributions repository AND the PGP key for verifying packages
  - curl -sL https://deb.nodesource.com/setup_12.x  | bash -

  # Install Node.js from the Debian-based distributions repository
  - apt-get install -y nodejs && curl -L https://www.npmjs.com/install.sh | sh
  # - npm install -g npx
  - npm install -g yarn
  - yarn install
  # - yarn run build


  #Installing the Android SDK
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null

  #Setting up the environment variable
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x * # gradlew #set executable permission

  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses # accept SDK licences
  - set -o pipefail
# - build_release_android
stages:
  - build_release_android

build_release_android:
  cache: {}
  stage: build_release_android
  tags:
    - appbuild
  script:
    - base64 -d $PLAY_STORE_UPLOAD_KEYSTORE_FILE_BASE64 > android/app/uploadRelease.keystore
    - cd android
    - ./gradlew  bundleRelease
    # - ./gradlew  publishApkRelease # command to publish app on play store
  only:
    - development #set trigger for CICD if push or merge in master branch
